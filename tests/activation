#!/bin/bash

: "${NDEBUG=}"

profile=debug
if [ -n "${NDEBUG}" ]; then
    profile=release
fi

SLC=$(dirname "$0")/../build/${profile}/structlangc
red=$(tput setaf 1)
grn=$(tput setaf 2)
clr=$(tput sgr0)

if [[ ! -x $SLC ]]; then
    exit 1
fi


# This is basically just the acceptable cases from the semantics tests

# TODO rewrite to check the records

check_pass() {
    _=$(echo "$1" | $SLC -)
    result=$?
    if [[ $result == 0 ]]; then
        echo "${grn}passed${clr}: $(echo "$1" | tr $'\n' $' ')"
    else
        echo "${red}failed${clr}"
        echo "**program**"
        echo "$1"
        echo "**end**"
        echo
    fi
}

## Expressions

# int
check_pass "fn main() -> int { 0 }"

# bool
check_pass "fn main() -> bool { true }"
check_pass "fn main() -> bool { false }"

# Binary operations
check_pass "
fn main() -> int {
    1 + 2
}
"
check_pass "
fn main() -> int {
    2 - 1; 2 * 3; 4 / 2
}
"
check_pass "
fn main() -> int {
    1 << 2; 2 >> 1
}
"
check_pass "
fn main() -> bool {
    true && true
}
"
check_pass "
fn main() -> bool {
    false || false
}
"
check_pass "
fn main() -> bool {
    1 < 2
}
"
check_pass "
fn main() -> bool {
    1 <= 2
}
"
check_pass "
fn main() -> bool {
    1 > 2
}
"
check_pass "
fn main() -> bool {
    1 >= 2
}
"
check_pass "
fn main() -> bool {
    1 == 2
}
"
check_pass "
fn main() -> bool {
    1 != 2
}
"
check_pass "
fn main() -> bool {
    true == true
}
"
check_pass "
struct X { x: int }
fn main() -> bool {
    (new X{0}) == (new X{1})
}
"
check_pass "
struct X { x: int }
fn main() -> bool {
    *(new X{0}) == *(new X{1})
}
"

# let bindings

check_pass "
fn main() -> void {
    let a: int = 1
}
"

# function calls
check_pass "
fn f(x: int) -> int {
    x
}
fn main() -> int {
    f(0)
}
"
check_pass "
fn f(x: int, y: int) -> int {
    x + 2 * y
}
fn main() -> int {
    f(f(f(1, 2), f(3, 4)), f(f(5, 6), f(7, 8)))
}
"

check_pass "
fn f(a0: int, a1: int, a2: int, a3: int, a4: int, a5: int, a6: int, a7: int, a8: int, a9: int, a10: int, a11: int, a12: int, a13: int, a14: int, a15: int, a16: int, a17: int, a18: int, a19: int) -> int {
    a0 + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 + a18 + a19
}
fn main() -> int {
    f(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
}
"

check_pass "
fn main() -> int {
    main()
}
"

# structs
check_pass "
struct X { x: int }
fn main() -> void {
    let a: *X = new X { 0 }
}
"
# TODO: more of these

# variable references
check_pass "
fn main() -> int {
    let a: int = 0;
    a
}
"

# return
check_pass "
fn main() -> int {
    return 0;
}
"
check_pass "
fn main() -> int {
    return 0;
    return 0;
}
"

# loop
check_pass "
fn main() -> void {
    loop {
        0
    }
}
"
check_pass "
fn main() -> int {
    loop {
        0
    }
}
"

# break
check_pass "
fn main() -> void {
    loop {
        break
    }
}
"

# pointer dereference / struct member
check_pass "
struct X { x: int }
fn main() -> X {
    *(new X { 0 })
}
"
check_pass "
struct X { x: int }
fn main() -> int {
    let a: *X = new X { 0 };
    a->x
}
"
check_pass "
struct X { x: int }
fn main() -> int {
    let a: X = *(new X { 0 });
    a.x
}
"

# addrress of
check_pass "
fn main() -> *int {
    let x: int = 1;
    &x
}
"
check_pass "
struct X { x: int }
fn main() -> *X {
    let xx: *X = new X{0};
    &(*xx)
}
"
check_pass "
struct X { x: int }
fn main() -> *int {
    let xx: *X = new X{0};
    &xx->x
}
"
check_pass "
struct X { x: int }
fn main() -> *int {
    let xx: X = *(new X{0});
    &xx.x
}
"

# if expression
check_pass "
fn main() -> int {
    if 1 < 2 {
        1
    } else {
        2
    }
}
"
check_pass "
fn main() -> bool {
    if 1 < 2 {
        true
    } else {
        false
    }
}
"
check_pass "
fn main() -> void {
    if 1 < 2 {
        return
    }
}
"
check_pass "
fn main() -> void {
    let a: int = if 1 < 2 {
        1
    } else {
        2
    }
}
"

# More complex combinations

# Structs as function parameters
check_pass '
struct X {
    a: bool,
    b: bool,
    c: bool,
    d: bool,
}

fn f(x: X) -> int {
    if (x.a && x.c) {
        5
    } else {
        10
    }
}

fn main() -> int {
    let x: *X = new X { false, true, false, true };
    f(*x)
}
'

# Structs containing pointers
check_pass '
struct X {
    a: int,
}
struct Y {
    a: *X,
    b: *X,
}
struct Z {
    a: *Y,
    b: Y,
    c: int,
    d: bool,
}

fn foo(bar: *Z) -> int { bar->a->a->a + bar->b.b->a + bar->c }

fn main() -> int {
    let y: *Y = new Y { new X {3}, new X {4} };
    let z: *Z = new Z {
        new Y { new X {1}, new X {2} },
        *y,
        5,
        true
    };
    foo(z)
}
'
