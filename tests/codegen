#!/bin/sh

args=`getopt vx $*`
if [ $? -ne 0 ]; then
    echo "usage: $0 [-vx]"
    exit 2
fi
set -- $args

verbose=
xfail=
while :; do
    case "$1" in
        -v)
            verbose=1
            shift
            ;;
        -x)
            xfail=1
            shift
            ;;
        --)
            shift; break
            ;;
    esac
done

BUILD_DIR="$(dirname "$0")/../build/debug"
test -x "$BUILD_DIR/structlangc" || exit 1
SLC="$BUILD_DIR/structlangc"

red=$(tput setaf 1)
grn=$(tput setaf 2)
rst=$(tput sgr0)
exitcode=0

# Set defaults for the linker and its options
: "${LD=clang}"
: "${LDFLAGS=}"
: "${LDLIBS=}"

if [ -n "$verbose" ]; then
    : "${MAKE=make}"
else
    : "${MAKE=make -s}"
fi

if command -v md5sum 1>/dev/null; then
    MD5=md5sum
else
    MD5=md5
fi

fail() {
    exitcode=$((1 + exitcode))
    # check exit
    if [ -n "$xfail" ] && [ "$exitcode" -gt 0 ]; then
        exit "$exitcode"
    fi
}

expect () {
    code="$1"
    expected="$2"

    code_hash=$(echo "$code" | $MD5 | awk '{ print $1 }')
    code_d=$BUILD_DIR/tests/${code_hash}
    mkdir -p "${code_d}"
    ctmp="${code_d}/test.sl"
    test -f ${ctmp} || echo "$code" > ${ctmp}
    stmp="${code_d}/test.s"
    atmp="${code_d}/a.out"

    # Tell make how to produce our assembly code
    # structlangc .../test.sl -o .../test.s
    if ! (printf '%s: %s %s\n\t%s $< -o $@\n' "$stmp" "$ctmp" "$SLC" "$SLC" | $MAKE -f -); then
        echo "${red}FAILED${rst} to compile '$code'"
        fail
        return
    fi

    # Link
    # $LD $LDFLAGS $stmp -o $atmp $LDLIBS
    if ! (printf '%s: %s\n\t%s %s $< -o $@ %s\n' "$atmp" "$stmp" "$LD" "$LDFLAGS" "$LDLIBS" | $MAKE -f -); then
        echo "${red}FAILED${rst} to assmble and link '$code'"
        fail
        return
    fi

    # Run
    (cd ${code_d} && sh -c './a.out; echo $? > test.result')

    result=$(cat ${code_d}/test.result)
    if ! [ "$result" = "$expected" ]; then
        echo "${red}FAIL:${rst} '$code'"
        echo "  expected: '$expected'"
        echo "  actual:   '$result'"
        fail
        return
    fi
    if [ -n "$verbose" ]; then
        echo "${grn}pass${rst}: '$code'"
    else
        echo "${grn}pass${rst}: $(echo "$code" | tr $'\n' $' ')"
    fi
}

# The tests

expect 'fn main() -> int { let a: int = 0; a }' '0'
expect 'fn main() -> int { let a: int = 1; a }' '1'
expect 'fn main() -> int { let a: int = -3; a }' '253'
expect 'fn main() -> int { let a: int = 1; let b: int = 2; a + b }' '3'
expect 'fn main() -> int { let a: int = 1; let b: int = 2; a - b }' '255'
expect "fn main() -> bool { true }" '1'
expect "fn main() -> bool { false }" '0'

# Arithmetic
expect 'fn main() -> int { 1 << 2; 2 >> 1 }' 1
expect 'fn main() -> int { 2 / 2 }' 1
expect 'fn main() -> int { 4 / 2 }' 2

# Logic
expect 'fn main() -> bool { true && true }' 1
expect 'fn main() -> bool { false || false }' 0
expect 'fn main() -> bool { 1 < 2 }' 1
expect 'fn main() -> bool { 1 <= 2 }' 1
expect 'fn main() -> bool { 1 > 2 }' 0
expect 'fn main() -> bool { 1 >= 2 }' 0
expect 'fn main() -> bool { 1 == 2 }' 0
expect 'fn main() -> bool { 1 != 2 }' 1
expect 'fn main() -> bool { true == true }' 1

# Allocated data
expect 'struct X { x: int }
fn main() -> bool {
    (new X{1}) == (new X{1})
}' 0

expect '
struct X { x: int }
fn main() -> bool {
    *(new X{5}) == *(new X{5})
}
' 1

# Test loading of single adjacent bytes
expect '
struct X {
    a: bool,
    b: bool,
    c: bool,
    d: bool,
}

fn main() -> int {
    let x: *X = new X { false, true, false, true };
    if (x->a && x->c) {
        5
    } else {
        10
    }
}
' 10


# Calls
expect 'fn f() -> int { 5 }
fn main() -> int { f() }' '5'

expect 'fn f(x: int) -> int { x }
fn main() -> int { f(5) }' '5'

expect 'fn f() -> int { let x: int = 25; let b: int = 50; 75 }
fn main() -> int { let x: int = 5; let b: int = f(); x }' '5'

expect "
fn f(x: int, y: int) -> int {
    x + 2 * y
}
fn main() -> int {
    f(f(f(1, 2), f(3, 4)), f(f(5, 6), f(7, 8)))
}
" 153

expect 'fn f(a0: int, a1: int, a2: int, a3: int, a4: int, a5: int, a6: int, a7: int, a8: int, a9: int, a10: int, a11: int, a12: int, a13: int, a14: int, a15: int, a16: int, a17: int, a18: int, a19: int) -> int {
    a0 + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 + a18 + a19
}
fn main() -> int {
    f(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
}' 190


# Conditionals
expect 'fn main() -> int { if 1 < 2 { 1 } else { 2 } }' '1'
#   I think this one is just random
#   TODO: rewrite main to always return int
expect 'fn main() -> void { if 1 < 2 { return } }' 1

expect 'fn main() -> int { if 1 < 2 { 1 } else { 2 } }' '1'


# Complex interactions

expect '
struct X { a: bool, b: bool, c: bool, d: bool, }

fn f(x: X) -> int {
    if (x.a && x.c) {
        5
    } else {
        10
    }
}

fn main() -> int {
    let x: *X = new X { false, true, false, true };
    f(*x)
}
' 10

expect '
struct X { a: bool, b: bool, c: bool, d: bool, }
fn f(x: X) -> int { if (x.a) { 5 } else { 10 } }
fn main() -> int {
    let x: *X = new X { false, true, true, true };
    f(*x)
}
' 10

expect '
struct X { a: bool, b: bool, c: bool, d: bool, }
fn f(x: X) -> int { if (x.b) { 5 } else { 10 } }
fn main() -> int {
    let x: *X = new X { true, false, true, true };
    f(*x)
}
' 10

expect '
struct X { a: bool, b: bool, c: bool, d: bool, }
fn f(x: X) -> int { if (x.c) { 5 } else { 10 } }
fn main() -> int {
    let x: *X = new X { true, true, false, true };
    f(*x)
}
' 10

expect '
struct X { a: bool, b: bool, c: bool, d: bool, }
fn f(x: X) -> int { if (x.d) { 5 } else { 10 } }
fn main() -> int {
    let x: *X = new X { true, true, true, false };
    f(*x)
}
' 10

expect '
struct X { a: bool, b: bool, c: bool, d: bool, }

fn f(x: X) -> int {
    if (x.a || x.c) {
        5
    } else {
        10
    }
}

fn main() -> int {
    let x: *X = new X { false, true, false, true };
    f(*x)
}
' 10


expect '
fn g() -> int { return 5 }
fn h() -> int { return 10 }
fn f(x: bool) -> int { if x { g() } else { h() } }
fn main() -> int { f(false) }
' 10
expect '
fn g() -> int { return 5 }
fn h() -> int { return 10 }
fn f(x: bool) -> int { if x { g() } else { h() } }
fn main() -> int { f(true) }
' 5

# I think there is an argument clobbering problem
expect '
fn g(x: int) -> int { return x }
fn h() -> int { return 10 }
fn f(x: int) -> int {
    if x == 3 {
        if g(5) == 5 && x == 3 { g(5) }
        else { g(15) } }
    else { h() }
}
fn main() -> int { f(3) }
' 5

exit ${exitcode}
