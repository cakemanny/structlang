#!/bin/sh

# This script is used in order to test the x86_64 linux backend
# from an arm64 mac.
# It contains a lesser number of tests due to development on that platform
# lagging behind.

if [ "$(uname)" = "Linux" ] && [ "$(uname -m)" = "x86_64" ]; then
    echo "on x86_64-linux, use codegen instead" >&2
    exit 1
fi

args=`getopt v $*`
if [ $? -ne 0 ]; then
    echo "usage: $0 [-v]"
    exit 2
fi
set -- $args

verbose=
while :; do
    case "$1" in
        -v)
            verbose=1
            shift
            ;;
        --)
            shift; break
            ;;
    esac
done

SCRIPT_DIR=$(dirname "$0")
BUILD_DIR="$SCRIPT_DIR/../build/debug"
test -x "$BUILD_DIR/structlangc" || exit 1
SLC="$BUILD_DIR/structlangc"

red=$(tput setaf 1)
grn=$(tput setaf 2)
rst=$(tput sgr0)
exitcode=0

# todo: move to the actual makefile ?
RTO="$BUILD_DIR/runtime_x86_64.o"
if ! [ -f "$BUILD_DIR" ]; then
    zig cc -c --target=x86_64-linux-gnu "$SCRIPT_DIR/../runtime/runtime.c" \
        -o "$RTO"
fi

LD="zig cc"
LDFLAGS="--target=x86_64-linux-gnu -Wno-unused-command-line-argument"
LDLIBS="$RTO"


tmp_d=$(mktemp -d) || exit 1
echo "$tmp_d"
trap "rm -rf ${tmp_d}" EXIT

container_id=$(docker run --detach --rm --platform=linux/amd64 -v "$tmp_d:/app" -w /app debian:latest sh -c 'sleep 60')
trap "docker stop -t 0 $container_id; rm -rf ${tmp_d}" EXIT

expect () {
    code="$1"
    expected="$2"
    stmp="${tmp_d}/test.s"
    atmp="${tmp_d}/a.out"
    if (echo "$code" | $SLC --target=x86_64 - > "$stmp"); then
        # Link
        $LD $LDFLAGS "$stmp" -o "$atmp" $LDLIBS
        # Run
        # We write to a file because docker seems to spit a carriage return out
        docker exec -it "$container_id" sh -c './a.out; echo $? > test.result'

        result=$(cat "${tmp_d}/test.result")
        if [ "$result" = "$expected" ]; then
            if [ -n "$verbose" ]; then
                echo "${grn}pass${rst}: '$code'"
            else
                echo "${grn}pass${rst}: $(echo "$code" | tr '\n' ' ')"
            fi
        else
            echo "${red}FAIL:${rst} '$code'"
            echo "  expected: '$expected'"
            echo "  actual:   '$result'"
            exitcode=$((1 + exitcode))
        fi
    else
        echo "${red}FAILED${rst} to compile '$code'"
        exitcode=$((1 + exitcode))
    fi
}

# The tests

expect 'fn main() -> int { let a: int = 0; a }' '0'
expect 'fn main() -> int { let a: int = 1; a }' '1'
expect 'fn main() -> int { let a: int = 1; let b: int = 2; a + b }' '3'
expect 'fn main() -> int { let a: int = 1; let b: int = 2; a - b }' '255'
expect "fn main() -> bool { true }" '1'
expect "fn main() -> bool { false }" '0'

# Arithmetic
# expect 'fn main() -> int { 1 << 2; 2 >> 1 }' 1
expect 'fn main() -> int { 2 / 2 }' 1
expect 'fn main() -> int { 4 / 2 }' 2

# Logic
expect 'fn main() -> bool { true && true }' 1
expect 'fn main() -> bool { false || false }' 0
expect 'fn main() -> bool { 1 < 2 }' 1
expect 'fn main() -> bool { 1 <= 2 }' 1
expect 'fn main() -> bool { 1 > 2 }' 0
expect 'fn main() -> bool { 1 >= 2 }' 0
expect 'fn main() -> bool { 1 == 2 }' 0
expect 'fn main() -> bool { 1 != 2 }' 1
expect 'fn main() -> bool { true == true }' 1

# Allocated data
expect 'struct X { x: int }
fn main() -> bool {
    (new X{0}) == (new X{1})
}' 0

expect '
struct X { x: int }
fn main() -> bool {
    *(new X{5}) == *(new X{5})
}
' 1

# Test loading of single adjacent bytes
expect '
struct X {
    a: bool,
    b: bool,
    c: bool,
    d: bool,
}

fn main() -> int {
    let x: *X = new X { false, true, false, true };
    if (x->a && x->c) {
        5
    } else {
        10
    }
}
' 10

# Calls
expect 'fn f() -> int { 5 }
fn main() -> int { f() }' '5'

expect 'fn f(x: int) -> int { x }
fn main() -> int { f(5) }' '5'

expect 'fn f() -> int { let x: int = 25; let b: int = 50; 75 }
fn main() -> int { let x: int = 5; let b: int = f(); x }' '5'

# Conditionals
expect 'fn main() -> int { if 1 < 2 { 1 } else { 2 } }' '1'
expect 'fn main() -> void { if 1 < 2 { return } }' '0'

exit ${exitcode}
